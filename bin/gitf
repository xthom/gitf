#!/bin/sh

ROOT_BRANCH="master"
ORIGIN="origin"

task_start(){
  if [[ $# != 1 ]] ; 
    then echo "Enter the name of the branch to open">&2 && exit 1; 
  fi
  require_branch $ROOT_BRANCH
  git checkout -b "$1"
}

task_finish(){
  if [[ $# != 1 ]] ; 
    then echo "Enter the name of the branch to close and finish">&2 && exit 1; 
  fi
  require_branch $ROOT_BRANCH
  git merge --no-ff "$1"
  git tag -a "$1"
  git branch -d "$1"
}

task_publish(){
  BRANCH=$1
  if [[ $# != 1 ]] ; then
    BRANCH="`get_current_branch`";
  fi
  if [[ $BRANCH == "" ]]; then
    echo "Not on a git branch!" && exit 1;
  fi
  echo "Publishing branch $BRANCH to $ORIGIN"
  git push "$ORIGIN" "$BRANCH"
}

task_update(){
}

task_usage() {
  bold=`tput bold`
  normal=`tput sgr0`
  echo "\n${bold}GITF${normal} - a simple git dev-flow tool\n"
  echo "Usage: ${bold}start|publish|update|finish${normal} <branch_name>"
  echo "\t - start a branch based on master"
  echo "\t - commit your changes"
  echo "\t - publish the branch to the origin"
  echo "\t - eventually update your working branch from master"
  echo "\t - after approvement or review finish the branch and push the changes\n"
  echo "Usage: ${bold}config${normal} update"
  echo "\t - update gitf script to the latest version"
  echo ""
  exit 1
}

task_config(){
  action=$1
  case $action in
    update)
      curl "https://raw.github.com/xthom/gitf/master/bin/install" | sh ;;
    *)
      task_usage ;;
  esac
}

require_branch(){
  git checkout -q "$1"
  if [[ $"`get_current_branch`" != "$1" ]] ;
    then echo "Failed to checkout $1">&2 && exit 1; 
  fi
}

get_current_branch(){
  git symbolic-ref HEAD 2>/dev/null | cut -d"/" -f 3
}

# get_current_dir(){
#   echo "$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
# }

get_remote_name(){
  git remote show
}

call_task(){
  if [[ $"`function_exists task_$1`" == 1 ]] ; then
    task_$1 "${@:2}"
  else 
    echo "Task $1 does not exist!\n"
    task_usage
    exit 1
  fi
  exit 0
}

function_exists(){
  declare -f -F $1 > /dev/null
  if [[ $? == "1" ]]; then echo 0; else echo 1; fi;
}

if [[ $# -eq 0 ]]; then task_usage; else call_task "$@"; fi

